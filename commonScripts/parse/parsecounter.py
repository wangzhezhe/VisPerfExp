# Parse the conunter file generated by streamline
from os import system
import subprocess
import re
from os.path import exists
import sys

def parse_syscommand(file_name, rank, iter_step):
    #print("---check {} Advec iterstep {}---".format(file_name,iter_step))
    labelstr = "rank_"+str(rank)+"_Advec_iterstep_" + str(iter_step)
    command = "cat " + file_name + " |grep Advec " + "|grep " + "_" + str(iter_step) + "_" + "| cut -d \" \" -f 2 | python3 analysis.py "
    
    command = command+labelstr

    #print(command)
    
    system(command)
    
    #print("---check {} Recv iterstep {}---".format(file_name,iter_step))
    labelstr = "rank_"+str(rank)+"_Recv_iterstep_" + str(iter_step)
    command = "cat " + file_name + " |grep Received "+ "|grep " + "_" + str(iter_step) + "_" + "| cut -d \" \" -f 2 | python3 analysis.py "

    command = command+labelstr

    system(command)

# the first key is the step
# the second key is the rank
# the value is the particle number sent by this rank at this step
advect_dic={}
recieve_dic={}

# the key is the step
# the value is accumulated particle value under this key
advect_dic_sum={}
recieve_dic_sum={}

def parse_explicit(file_name, rank):

    global advect_dic
    global recieve_dic
    global advect_dic_sum
    global recieve_dic_sum
    
    #print("filename:",file_name,"rank:",rank)

    file_exists = exists(file_name)
    
    if file_exists==False:
        return
    # open file
    # print("check filename:",file_name,"rank:",rank)
    fo=open(file_name, "r")
    
    for line in fo:
        line_strip=line.strip()
        #print(line_strip)
        #split between _
        split_str1 = line_strip.split("_")
        split_str2 = line_strip.split(" ")
        
        #print(split_str1)
        #print(split_str2)

        
        particlenum = int(split_str2[1])
        step = int(split_str2[0].split("_")[1])
     

        if(split_str1[0]=="ParticlesReceived"):
            
            if (step in recieve_dic.keys()) and (rank in recieve_dic[step].keys()):
                    recieve_dic[step][rank]=recieve_dic[step][rank]+particlenum
            else:
                inner_dic={}
                inner_dic[rank]=particlenum
                recieve_dic[step]=inner_dic

            if step in recieve_dic_sum.keys():
                recieve_dic_sum[step]=recieve_dic_sum[step]+particlenum
            else:
                recieve_dic_sum[step]=particlenum               

        if(split_str1[0]=="ParticlesAdvected"):
            
            if (step in advect_dic.keys()) and (rank in advect_dic[step].keys()):
                    advect_dic[step][rank]=advect_dic[step][rank]+particlenum
            else:
                inner_dic={}
                inner_dic[rank]=particlenum
                advect_dic[step]=inner_dic
                

            if step in advect_dic_sum.keys():
                advect_dic_sum[step]=advect_dic_sum[step]+particlenum
            else:
                advect_dic_sum[step]=particlenum

    fo.close() 

'''
    print("advec_map", advect_dic)
    print("recv_map", recieve_dic)
    

    # print sum for each step
    
    print("advect_dic_sum",advect_dic_sum)
    print("recieve_dic_sum",recieve_dic_sum)
    
    print("sorted_advect_dic_sum",sorted(advect_dic_sum.items(),key=lambda item: item[1]))
    print("sorted_recieve_dic_sum",sorted(recieve_dic_sum.items(),key=lambda item: item[1]))
'''


if __name__ == "__main__":
    
    if len(sys.argv)!=3:
        print("<binary> <procnum> <logDirPath, no />")
        exit()

    procs = int(sys.argv[1])
    dirPath = sys.argv[2]

    #step_start = 10
    #step_end = 20
    #visit_freq=10
    
    #for s in range (step_start,step_end,visit_freq):
    #    for i in range (0,procs,1):
    #        file_name = "counter."+str(i)+".out"
    #        parse_syscommand(file_name,i,s)

    for i in range (0,procs,1):
        file_name = dirPath+"/counter."+str(i)+".out"
        parse_explicit(file_name,i)  


    #print("advec_map", advect_dic)
    #print("recv_map", recieve_dic)

    #print sum for each step
    #print("advect_dic_sum",advect_dic_sum)
    for key, val in advect_dic_sum.items():
        print("advect key", key ,"val",val)
    
    #print("recieve_dic_sum",recieve_dic_sum)
    for key, val in sorted(recieve_dic_sum.items()):
        print("recv key", key ,"val",val)

    print("sorted_advect_dic_sum",sorted(advect_dic_sum.items(),key=lambda item: item[1]))
    print("sorted_recieve_dic_sum",sorted(recieve_dic_sum.items(),key=lambda item: item[1]))
